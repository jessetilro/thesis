module statics/main

imports signatures/develop-sig

imports statics/core
imports statics/expressions/literals
imports statics/expressions/math
imports statics/expressions/logic
imports statics/expressions/multiplicity-operators
imports statics/expressions/casts
imports statics/expressions/references
imports statics/expressions/functions
imports statics/expressions/collections
imports statics/functions
imports statics/data

rules // multi-file entry points

  projectOk : scope
  projectOk(s).
  
  fileOk : scope * Start
  fileOk(s, m@Module(id, opt, sections)) :- { s_data }
  	new s_data,
  	s_data -PARENT-> s,
    sectionsOk(s, s_data, sections),
    @m.scope := s.
    
  programOk : Start
  programOk(m@Module(id, opt, sections)) :- { s s_data }
    new s,
    new s_data,
  	s_data -PARENT-> s,
    sectionsOk(s, s_data, sections),
    @m.scope := s
    
    // each entity scope has a P edge to the root module scope
    // below we introduce inverse edges for these P edges
    // this way, entity_extension datums that are declared within
    // entity scopes can be reached from other entity scopes
//    query entity
//    	filter e and true
//    	in s |-> entities,
//    declareScopes(entities, s)
    .
  
rules // module sections

  sectionsOk maps sectionOk(*, *, list(*))
  sectionOk : scope * scope * ModuleSection
  
  sectionOk(s, s_data, ConfigSection(_)).
  sectionOk(s, s_data, ModelSection(models)) :-
    modelsOk(s, models).
  sectionOk(s, s_data, FunctionSection(functions)) :-
  	functionsOk(s, functions).
  sectionOk(s, s_data, DataSection(datas)) :- { s_empty }
 	new s_empty,
  	datasOk(s_empty, s_data, datas).
  sectionOk(s, s_data, ExecuteSection(executes)) :-
  	executesOk(s_data, executes).
  	
  executesOk maps executeOk(*, list(*))
  executeOk : scope * Execute
  executeOk(s, Exp2Execute(exp)) :-
  	richTypeOfExp(s, exp) == _.
  
rules // models
  
  modelsOk maps modelOk(*, list(*))
  
  modelOk : scope * Model
  
  modelOk(s, Entity(id, optional_extends, strat, members)) :-
  	{ s_model s_resolve rtype s_parent parent_decl_id
  	  this_type this_mult this_strat
  	  entity_type }
  	// declaration
    new s_model, s_model -PARENT-> s,
    declareEntity(s, id, s_model),
    resolveEntity(s_model, id) == (_, entity_type@ENTITY(_, s_resolve)) | error $[duplicate definition of entity [id]]@id,
    // this binding
    this_type == entity_type,
    this_mult == ONE(),
    this_strat == stratOfStratList(strat),
    @id.type := this_type,
    declareThisRichtype(s_model, RICHTYPE(this_type, this_mult, this_strat)),
    // extension
    extendScopes(resolveEntityExtensions(s, id), s_model),
    // inheritance
    declareInheritance(s_model, id, optional_extends),
    // members
    membersOk(s, s_model, members).
    
  modelOk(s, FirstClassRelation(id, _, strat, members)) :-
  	{ s_model s_resolve this_type this_mult this_strat }
  	// declaration
    new s_model, s_model -PARENT-> s,
    declareEntity(s, id, s_model),
    resolveEntity(s_model, id) == (_, ENTITY(_, s_resolve)) | error $[duplicate definition of entity [id]]@id,
    // this binding
    this_type == ENTITY(_, s_resolve),
    this_mult == ONE(),
    this_strat == stratOfStratList(strat),
    @id.type := this_type,
    declareThisRichtype(s_model, RICHTYPE(this_type, this_mult, this_strat)),
    // extension
    extendScopes(resolveEntityExtensions(s, id), s_model),
    // members
    membersOk(s, s_model, members).
    
  modelOk(s, Relation(e1, r1, m1_optional, m2_optional, e2, r2)) :-
    { s_e1 s_e2 s_r1 s_r2 m1 m2 id1 id2 s_p1 s_p2
      e1_type e2_type e1_decl_id e2_decl_id }
    (e1_decl_id, e1_type@ENTITY(_, s_e1)) == resolveEntity(s, e1) | error $[entity [e1] is not declared],
    @e1.type := e1_type,
    @e1.ref := e1_decl_id,
    (e2_decl_id, e2_type@ENTITY(_, s_e2)) == resolveEntity(s, e2) | error $[entity [e2] is not declared],
    @e2.type := e2_type,
    @e2.ref := e2_decl_id,
    m1 == multOfSpaceMultList(m1_optional),
    m2 == multOfSpaceMultList(m2_optional),
    r1 == [ID2DotID(id1)],
    r2 == [ID2DotID(id2)],
    
    new s_r1,
    s_r1 -EXTEND-> s_e1,
    s_r1 -P-> s,
    
    new s_r2,
    s_r2 -EXTEND-> s_e2,
    s_r2 -P-> s,
    
    new s_p1,
    setProp(s_p1, "ns", "relation"),
    setProp(s_p1, "inverse", id2),
    setProp(s_p1, "side", "left"),
    setPropType(s_p1, "reltype", NOTYPE()),
    setProp(s_p1, "derivationtype", "normal"),
    setPropStrat(s_p1, "calculationstrategy", INCREMENTAL()),
    
    new s_p2,
    setProp(s_p2, "ns", "relation"),
    setProp(s_p2, "inverse", id1),
    setProp(s_p2, "side", "right"),
    setPropType(s_p2, "reltype", NOTYPE()),
    setProp(s_p2, "derivationtype", "normal"),
    setPropStrat(s_p2, "calculationstrategy", INCREMENTAL()),
    
    !member[id1, (RICHTYPE(e2_type, m1, INCREMENTAL()), PROPS(s_p1))] in s_r1,
    assertMemberDeclarationUnique(s_r1, id1),
    !entity_extension[e1, s_r1] in s,
    
    !member[id2, (RICHTYPE(e1_type, m2, INCREMENTAL()), PROPS(s_p2))] in s_r2,
    assertMemberDeclarationUnique(s_r2, id2),
    !entity_extension[e2, s_r2] in s.
   
  modelOk(s, RelationDerived(e1, r1, m1_optional, expr, m2_optional, e2, r2, str)) :-
    { e1_type e2_type s_e1 s_e2 s_r1 s_r2 m1 m2 id1 id2 s_p1 s_p2 strat expr_type expr_entity expr_mult expr_strat
      e1_decl_id e2_decl_id}
    (e1_decl_id, e1_type@ENTITY(_, s_e1)) == resolveEntity(s, e1) | error $[entity [e1] is not declared],
    @e1.type := e1_type,
    @e1.ref := e1_decl_id,
    (e2_decl_id, e2_type@ENTITY(_, s_e2)) == resolveEntity(s, e2) | error $[entity [e2] is not declared],
    @e2.type := e2_type,
    @e2.ref := e2_decl_id,
    m1 == multOfSpaceMultList(m1_optional),
    m2 == multOfSpaceMultList(m2_optional),
    r1 == [ID2DotID(id1)],
    r2 == [ID2DotID(id2)],
    strat == stratOfStratList(str),
    richTypeOfExp(s_e1, expr) == RICHTYPE(expr_type@ENTITY(_, _), expr_mult, expr_strat) | error $[expression should yield an entity type]@expr,
    
    try { m2 == ZERO_MORE() } | warning $[warning: multiplicity [m2] cannot be statically guaranteed]@m2_optional,
    subtype(expr_type, e2_type) | error $[type mismatch: expected [e2_type] got [expr_type]]@expr,
    mult(expr_mult, m1) | error $[multiplicity mismatch: expected [m1] got [expr_mult]]@expr,
    strat(expr_strat, strat) | error $[strategy mismatch: expected [strat] got [expr_strat]]@expr,    
    
    new s_r1,
    s_r1 -EXTEND-> s_e1,
    s_r1 -P-> s,
    
    new s_r2,
    s_r2 -EXTEND-> s_e2,
    s_r2 -P-> s,
    
    new s_p1,
    setProp(s_p1, "ns", "relation"),
    setProp(s_p1, "inverse", id2),
    setProp(s_p1, "side", "left"),
    setPropType(s_p1, "reltype", NOTYPE()),
    setProp(s_p1, "derivationtype", "derivation"),
    setPropStrat(s_p1, "calculationstrategy", strat),
    setPropInlining(s_p1, "inlining", NOT_INLINE()),
    
    new s_p2,
    setProp(s_p2, "ns", "relation"),
    setProp(s_p2, "inverse", id1),
    setProp(s_p2, "side", "right"),
    setPropType(s_p2, "reltype", NOTYPE()),
    setProp(s_p2, "derivationtype", "normal"),
    setPropStrat(s_p2, "calculationstrategy", strat),
    setPropInlining(s_p2, "inlining", NOT_INLINE()),
    
    !member[id1, (RICHTYPE(e2_type, m1, INCREMENTAL()), PROPS(s_p1))] in s_r1,
    assertMemberDeclarationUnique(s_r1, id1),
    !entity_extension[e1, s_r1] in s,
    
    !member[id2, (RICHTYPE(e1_type, m2, INCREMENTAL()), PROPS(s_p2))] in s_r2,
    assertMemberDeclarationUnique(s_r2, id2),
    !entity_extension[e2, s_r2] in s.
    
  membersOk maps memberOk(*, *, list(*))
  memberOk : scope * scope * Member
  
  memberOk(_, s, DerivationAttribute(id, type, mult, exp, [Inline()])) :-
  { declared decl_richtype e_type e_mult e_strat d_type d_mult d_strat s_p }
    RICHTYPE(e_type, e_mult, e_strat) == richTypeOfExp(s, exp),

    d_type == typeOfAnyType(s, type),
    d_mult == multOfMultOrdList(mult),
    d_strat == e_strat, // inline attributes take the strategy from their expression, this strategy is the strongest strategy that the attribute can be inlined in.
    
    subtype(e_type, d_type) | error $[type mismatch: expected [d_type] got [e_type]]@exp,
    mult(e_mult, d_mult) | error $[multiplicity mismatch: expected [d_mult] got [e_mult]]@exp,
    
    new s_p,
    setProp(s_p, "ns", "attribute"),
    setProp(s_p, "derivationtype", "derivation"),
    setPropExp(s_p, "expr", exp),
    setPropType(s_p, "reltype", NOTYPE()),
    setProp(s_p, "side", "none"),
    setPropStrat(s_p, "calculationstrategy", d_strat),
    setPropInlining(s_p, "inlining", INLINE()),
    
    !member[id, (RICHTYPE(d_type, d_mult, d_strat), PROPS(s_p))] in s,
    assertMemberDeclarationUnique(s, id),
    assertMemberOverrideOk(INLINE(), s, id),
    
    @id.type := RICHTYPE(d_type, d_mult, d_strat),
    @exp.type := RICHTYPE(e_type, e_mult, e_strat).
  
  memberOk(_, s, DerivationAttribute(id, type, mult, exp, strat)) :-
  { declared decl_richtype e_type e_mult e_strat d_type d_mult d_strat rid s_p }
    RICHTYPE(e_type, e_mult, e_strat) == richTypeOfExp(s, exp),

    d_type == typeOfAnyType(s, type),
    d_mult == multOfMultOrdList(mult),
    d_strat == stratOfStratList(strat),
    
    subtype(e_type, d_type) | error $[type mismatch: expected [d_type] got [e_type]]@exp,
    mult(e_mult, d_mult) | error $[multiplicity mismatch: expected [d_mult] got [e_mult]]@exp,
    strat(e_strat, d_strat) | error $[strategy mismatch: expected [d_strat] got [e_strat]]@exp,
    
    new s_p,
    setProp(s_p, "ns", "attribute"),
    setProp(s_p, "derivationtype", "derivation"),
    setPropExp(s_p, "expr", exp),
    setPropType(s_p, "reltype", NOTYPE()),
    setProp(s_p, "side", "none"),
    setPropStrat(s_p, "calculationstrategy", d_strat),
    setPropInlining(s_p, "inlining", NOT_INLINE()),
    
    !member[id, (RICHTYPE(d_type, d_mult, d_strat), PROPS(s_p))] in s,
    assertMemberDeclarationUnique(s, id),
    assertMemberOverrideOk(NOT_INLINE(), s, id),
    
    @id.type := RICHTYPE(d_type, d_mult, d_strat),
    @exp.type := RICHTYPE(e_type, e_mult, e_strat).
    
  memberOk(_, s, DefaultAttribute(id, type, mult, exp, strat)) :-
  { declared decl_richtype e_type e_mult e_strat d_type d_mult d_strat rid s_p }
    RICHTYPE(e_type, e_mult, e_strat) == richTypeOfExp(s, exp),

    d_type == typeOfPrimitiveType(type),
    d_mult == multOfMultList(mult),
    d_strat == stratOfStratList(strat),
    
    subtype(e_type, d_type) | error $[type mismatch: expected [d_type] got [e_type]]@exp,
    mult(e_mult, d_mult) | error $[multiplicity mismatch: expected [d_mult] got [e_mult]]@exp,
    strat(e_strat, d_strat) | error $[strategy mismatch: expected [d_strat] got [e_strat]]@exp,
    
    new s_p,
    setProp(s_p, "ns", "attribute"),
    setProp(s_p, "derivationtype", "default_value"),
    setPropExp(s_p, "expr", exp),
    setPropType(s_p, "reltype", NOTYPE()),
    setProp(s_p, "side", "none"),
    setPropStrat(s_p, "calculationstrategy", d_strat),
    setPropInlining(s_p, "inlining", NOT_INLINE()),
    
    !member[id, (RICHTYPE(d_type, d_mult, d_strat), PROPS(s_p))] in s,
    assertMemberDeclarationUnique(s, id),
    assertMemberOverrideOk(NOT_INLINE(), s, id),
    
    @id.type := RICHTYPE(d_type, d_mult, d_strat),
    @exp.type := RICHTYPE(e_type, e_mult, e_strat).
    
  memberOk(_, s, Attribute(id, type, mult)) :-
  { declared decl_richtype e_type e_mult e_strat d_type d_mult d_strat rid s_p
  	overridden_type member_type overridden_mult member_mult }
    d_type == typeOfPrimitiveType(type),
    d_mult == multOfMultList(mult),
    d_strat == INCREMENTAL(),
    
    new s_p,
    setPropInlining(s_p, "inlining", NOT_INLINE()),
    !member[id, (RICHTYPE(d_type, d_mult, d_strat), PROPS(s_p))] in s,
    assertMemberDeclarationUnique(s, id),
    assertMemberOverrideOk(NOT_INLINE(), s, id),
    
    (_, RICHTYPE(member_type, _, _)) == resolveMember(s, id),
    overridden_type == overriddenMemberType(s, id, member_type) | error $[overriding type error]@type,
    equitype(overridden_type, d_type),
    
    (_, RICHTYPE(_, member_mult, _)) == resolveMember(s, id),
    overridden_mult == overriddenMemberMult(s, id, member_mult) | error $[overriding multiplicity error]@mult,
    equimult(overridden_mult, d_mult),
    
//    o_type == overriddenMemberType(s, (id, this_member)),
//    assertOverriddenMemberTypeEqual(s, id, d_type) | error $[overriding type error: expected [o_type] got [d_type]]@type,
    
//    o_mult == overriddenMemberMult(s, (id, this_member)),
//    assertOverriddenMemberMultEqual(s, (id, this_member)) | error $[overriding multiplicity error: expected [o_mult] got [d_mult]]@mult,
    
    @id.type := RICHTYPE(d_type, d_mult, d_strat).
  
  memberOk(_, s, AbstractAttribute(id, type, mult, strat)) :-
  { declared decl_richtype d_type d_mult d_strat rid s_p }

    d_type == typeOfPrimitiveType(type),
    d_mult == multOfMultList(mult),
    d_strat == stratOfStratList(strat),

    new s_p,
    setProp(s_p, "ns", "attribute"),
    setProp(s_p, "derivationtype", "abstract"),
    setProp(s_p, "reltype", "none"),
    setPropType(s_p, "side", NOTYPE()),
    setPropStrat(s_p, "calculationstrategy", d_strat),
    setPropInlining(s_p, "inlining", NOT_INLINE()),
    
    !member[id, (RICHTYPE(d_type, d_mult, d_strat), PROPS(s_p))] in s,
    assertMemberDeclarationUnique(s, id),
    assertMemberOverrideOk(NOT_INLINE(), s, id),
    
    @id.type := RICHTYPE(d_type, d_mult, d_strat).
    
  memberOk(s_root, s, Role(entity, inverse, mult, role)) :-
  { s_entity entity_type entity_name
  	inverse_name inverse_mult
  	this_richtype this_type this_mult this_strat
  	role_name
  	s_entity_extension
  	s_props_this s_props_entity }
  	// resolve references
	(entity_name, entity_type@ENTITY(_, s_entity)) == resolveEntity(s, entity) | error $[entity [entity] is not declared],
	@entity.ref := entity_name,
	inverse_name == nameOfDotIDList(inverse),
    inverse_mult == multOfSpaceMultList(mult),
	this_richtype@RICHTYPE(this_type, this_mult, this_strat) == resolveThisRichtype(s),
	role_name == nameOfSpaceArrowIDList(role),
	
	// declare relation member
	new s_props_this,
	setPropMult(s_props_this, "inverse_mult", inverse_mult),
    !member[role_name, (RICHTYPE(entity_type, ONE(), INCREMENTAL()), PROPS(s_props_this))] in s,
    assertMemberDeclarationUnique(s, role_name),
	
	// declare entity member
	new s_entity_extension,
    s_entity_extension -EXTEND-> s_entity,
    s_entity_extension -P-> s,
    !entity_extension[entity_name, s_entity_extension] in s_root,
    
    new s_props_entity,
    !member[inverse_name, (RICHTYPE(this_type, inverse_mult, INCREMENTAL()), PROPS(s_props_entity))] in s_entity_extension,
    assertMemberDeclarationUnique(s_entity_extension, inverse_name).
    
    
  memberOk(s_root, s, Shortcut(role1, shortcut1, role2, shortcut2)) :-
  	{ role1_id role1_type role1_mult role1_strat s_role1 role1_props role1_inverse_mult
  	  role2_id role2_type role2_mult role2_strat s_role2 role2_props role2_inverse_mult
  	  shortcut1_name shortcut2_name
  	  s_role1_extension role1_name s_shortcut1_props
  	  s_role2_extension role2_name s_shortcut2_props
  	  this_type }
  	// resolve references
  	(role1_id, RICHTYPE(role1_type@ENTITY(_, s_role1), role1_mult, role1_strat), role1_props) == resolveMemberWithProps(s, role1),
  	@role1.ref := role1_id,
  	PROPVAL_MULT(role1_inverse_mult) == getProp(role1_props, "inverse_mult"),
  	shortcut1_name == nameOfDotIDList(shortcut1),
  	(role2_id, RICHTYPE(role2_type@ENTITY(_, s_role2), role2_mult, role2_strat), role2_props) == resolveMemberWithProps(s, role2),
  	@role2.ref := role2_id,
  	PROPVAL_MULT(role2_inverse_mult) == getProp(role2_props, "inverse_mult"),
  	shortcut2_name == nameOfDotIDList(shortcut2),
  	
  	RICHTYPE(this_type, _, _) == resolveThisRichtype(s),
  	
  	// declare role1 member
  	new s_role1_extension,
    s_role1_extension -EXTEND-> s_role1,
    s_role1_extension -P-> s,
    role1_name == nameOfEntityType(role1_type),
    !entity_extension[role1_name, s_role1_extension] in s_root,
  	
  	new s_shortcut1_props,
  	setPropType(s_shortcut1_props, "reltype", this_type),
  	!member[shortcut1_name, (RICHTYPE(role2_type, role1_inverse_mult, INCREMENTAL()), PROPS(s_shortcut1_props))] in s_role1_extension,
  	assertMemberDeclarationUnique(s_role1_extension, shortcut1_name),
  	
  	// declare role2 member
  	new s_role2_extension,
    s_role2_extension -EXTEND-> s_role2,
    s_role2_extension -P-> s,
    role2_name == nameOfEntityType(role2_type),
    !entity_extension[role2_name, s_role2_extension] in s_root,
  	
  	new s_shortcut2_props,
  	setPropType(s_shortcut2_props, "reltype", this_type),
  	!member[shortcut2_name, (RICHTYPE(role1_type, role2_inverse_mult, INCREMENTAL()), PROPS(s_shortcut1_props))] in s_role2_extension,
  	assertMemberDeclarationUnique(s_role2_extension, shortcut2_name).
