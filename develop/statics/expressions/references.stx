module statics/expressions/references

imports statics/core

rules

  richTypeOfExp(s, this@This()) = richtype :-
    richtype == resolveThisRichtype(s),
    @this.type := richtype.
    
  richTypeOfExp(s, Ref(r)) = RICHTYPE(d_type, d_mult, d_strat) :- { id }
    resolveMember(s, r) == (id, RICHTYPE(d_type, d_mult, d_strat)) | error $[reference [r] cannot be resolved]@r,
    @r.type := RICHTYPE(d_type, d_mult, d_strat),
    @r.ref := id. // todo check materialization
    
  richTypeOfExp(s, MemberAccess(e, r)) = RICHTYPE(d_type, out_mult, out_strat) :- {s_entity e_mult e_strat d_mult d_strat id}
    richTypeOfExp(s, e) == RICHTYPE(ENTITY(_, s_entity), e_mult, e_strat) | error $[expression should yield an entity type]@e,
    resolveMember(s_entity, r) == (id, RICHTYPE(d_type, d_mult, d_strat)) | error $[reference [r] cannot be resolved]@r,
    out_mult == multLub(e_mult, d_mult),
    out_strat == stratLub(e_strat, d_strat),
    @r.ref := id.