module statics/expressions/references

imports statics/core

rules

  richTypeOfExp(s, This()) = RICHTYPE(t, ONE(), INCREMENTAL()) :-
    resolveThis(s) == t.
    
  richTypeOfExp(s, Ref(r)) = RICHTYPE(d_type, d_mult, d_strat) :- { id }
    resolveMember(s, r) == (id, RICHTYPE(d_type, d_mult, d_strat)) | error $[reference [r] cannot be resolved]@r,
    @r.type := RICHTYPE(d_type, d_mult, d_strat),
    @r.ref := id. // todo check materialization
    
  richTypeOfExp(s, MemberAccess(e, r)) = RICHTYPE(d_type, d_mult, d_strat) :- {s_entity e_mult e_strat}
    richTypeOfExp(s, e) == RICHTYPE(ENTITY(s_entity), e_mult, e_strat) | error $[expression should yield an entity type]@e,
    resolveMember(s_entity, r) == (_, RICHTYPE(d_type, d_mult, d_strat)) | error $[reference [r] cannot be resolved]@r.