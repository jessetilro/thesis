module statics/functions

imports signatures/develop-sig

imports statics/core
imports statics/expressions/literals
imports statics/expressions/math
imports statics/expressions/logic
imports statics/expressions/multiplicity-operators
imports statics/expressions/casts
imports statics/expressions/references
imports statics/expressions/functions
imports statics/expressions/collections

rules

  functionsOk maps functionOk(*, list(*))
  
  functionOk : scope * Function
  
  functionOk(s, Function(f, ps, t, m, e)) :- { function_s props_s paramtypes type mult richtype e_type e_mult e_strat }
  	new function_s,
  	function_s -PARENT-> s,
  	new props_s,
  	
  	declareFunction(s, f, richtype, PROPS(props_s)),
  	
  	paramtypes == parametersOk(function_s, ps),
  	setPropRichtypes(props_s, "paramtypes", paramtypes),
  	
  	RICHTYPE(e_type, e_mult, e_strat) == richTypeOfExp(function_s, e),
  	type == typeOfAnyType(s, t),
  	mult == multOfMultList(m),
  	richtype == RICHTYPE(type, mult, e_strat),
  	
  	subtype(e_type, type) | error $[type mismatch: expected [type] got [e_type]]@e,
  	mult(e_mult, mult) | error $[multiplicity mismatch: expected [mult] got [e_mult]]@e.
  
  parametersOk maps parameterOk(*, list(*)) = list(*)
  
  parameterOk : scope * Parameter -> RICHTYPE
  parameterOk(s, param@Parameter(p, t, m)) = richtype :- { props }
  	richtype == richtypeOfParameter(s, param),
  	new props,
  	!member[p, (richtype, PROPS(props))] in s.
  
  richtypesOfParameters maps richtypeOfParameter(*, list(*)) = *
  
  richtypeOfParameter : scope * Parameter -> RICHTYPE
  richtypeOfParameter(s, Parameter(p, t, m)) = RICHTYPE(type, mult, strat) :-
  	type == typeOfAnyType(s, t),
  	mult == multOfMultList(m),
  	strat == INCREMENTAL().
  