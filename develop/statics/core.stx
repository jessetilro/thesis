module statics/core

imports signatures/develop-sig
imports statics/_constructors

signature

  relations
    entity : ID -> TYPE
    entity_extension : ID * scope
    member : ID -> (RICHTYPE * PROPS)
    function : ID -> (RICHTYPE * PROPS)
    prop : string -> PROPVAL
    
  name-resolution
    labels 
      // D // definition
      I // import
      J // lower priority import
      P // parent
      S // requires a J to be wellformed
      // N // no edge at all (used for inverse querying)
      // new experimental labels, inspired by webdsl
      PARENT
      INHERIT
      EXTEND
  
rules // multiplicity/ordering lattice

  //                 TZeroOrMore()
  //                  /    \
  // ZeroOrMoreOrdered()  TOneOrMore()
  //             /    \    /
  //  TZeroOrOne()  TOneOrMoreOrdered()
  //             \    /
  //             TOne()
  
  multOfMultList : list(Multiplicity) -> MULT
  
  multOfMultList([x]) = multOfMult(x).
  multOfMultList([]) = ONE(). // todo check default multiplicity
  
  multOfMult : Multiplicity -> MULT
  
  multOfMult(One()) = ONE().
  multOfMult(ZeroOrOne()) = ZERO_ONE().
  multOfMult(OneOrMore()) = ONE_MORE().
  multOfMult(ZeroOrMore()) = ZERO_MORE().
  
  multOfSpaceMultList : list(SpaceMultiplicity) -> MULT
  
  multOfSpaceMultList([x]) = multOfSpaceMultiplicity(x).
  multOfSpaceMultList([]) = ONE().
  
  multOfSpaceMultiplicity : SpaceMultiplicity -> MULT
  multOfSpaceMultiplicity(MultiplicityOrdering2SpaceMultiplicity(x)) = multOfMultOrd(x).
  
  multOfMultOrdList : list(MultiplicityOrdering) -> MULT
  
  multOfMultOrdList([x]) = multOfMultOrd(x).
  multOfMultOrdList([]) = ONE(). // todo check default multiplicity ordering
  
  multOfMultOrd : MultiplicityOrdering -> MULT
  
  multOfMultOrd(Multiplicity2MultiplicityOrdering(x)) = multOfMult(x).
  multOfMultOrd(OneOrMoreOrdered()) = ONE_MORE_ORD().
  multOfMultOrd(ZeroOrMoreOrdered()) = ZERO_MORE_ORD().
  
  mult : MULT * MULT
  mult(ONE(), ZERO_ONE()).
  mult(ONE(), ONE_MORE_ORD()).
  mult(ZERO_ONE(), ZERO_MORE_ORD()).
  mult(ONE_MORE_ORD(), ZERO_MORE_ORD()).
  mult(ONE_MORE_ORD(), ONE_MORE()).
  mult(ZERO_MORE_ORD(), ZERO_MORE()).
  mult(ONE_MORE(), ZERO_MORE()).
  
  // transitive
  mult(ONE(), ZERO_MORE_ORD()).
  mult(ONE(), ONE_MORE()).
  mult(ONE(), ZERO_MORE()).
  mult(ZERO_ONE(), ZERO_MORE()).
  mult(ONE_MORE_ORD(), ZERO_MORE()).
  
  // reflexive
  mult(M, M).
  
  multLub : MULT * MULT -> MULT
  
  // identity
  multLub(ONE(), ONE()) = ONE().
  multLub(ZERO_ONE(), ZERO_ONE()) = ZERO_ONE().
  multLub(ONE_MORE_ORD(), ONE_MORE_ORD()) = ONE_MORE_ORD().
  multLub(ZERO_MORE_ORD(), ZERO_MORE_ORD()) = ZERO_MORE_ORD().
  multLub(ONE_MORE(), ONE_MORE()) = ONE_MORE().
  multLub(ZERO_MORE(), ZERO_MORE()) = ZERO_MORE().
  
  // root + descendants
  multLub(ZERO_MORE(), _) = ZERO_MORE().
  multLub(_, ZERO_MORE()) = ZERO_MORE().
  multLub(ZERO_MORE_ORD(), ONE_MORE()) = ZERO_MORE().
  multLub(ONE_MORE(), ZERO_MORE_ORD()) = ZERO_MORE().
  
  // zero_more_ord + descendants
  multLub(ZERO_MORE_ORD(), ZERO_ONE()) = ZERO_MORE_ORD().
  multLub(ZERO_ONE(), ZERO_MORE_ORD()) = ZERO_MORE_ORD().
  multLub(ZERO_MORE_ORD(), ONE_MORE_ORD()) = ZERO_MORE_ORD().
  multLub(ONE_MORE_ORD(), ZERO_MORE_ORD()) = ZERO_MORE_ORD().
  multLub(ZERO_MORE_ORD(), ONE()) = ZERO_MORE_ORD().
  multLub(ONE(), ZERO_MORE_ORD()) = ZERO_MORE_ORD().
  
  // one_more + descendants
  multLub(ONE_MORE(), ZERO_ONE()) = ONE_MORE().
  multLub(ZERO_ONE(), ONE_MORE()) = ONE_MORE().
  multLub(ONE_MORE(), ONE_MORE_ORD()) = ONE_MORE().
  multLub(ONE_MORE_ORD(), ONE_MORE()) = ONE_MORE().
  multLub(ONE_MORE(), ONE()) = ONE_MORE().
  multLub(ONE(), ONE_MORE()) = ONE_MORE().
  
  // zero_one + descendant
  multLub(ONE(), ZERO_ONE()) = ZERO_ONE().
  multLub(ZERO_ONE(), ONE()) = ZERO_ONE().
  
  // one_more_ord + descendant
  multLub(ONE(), ONE_MORE_ORD()) = ONE_MORE_ORD().
  multLub(ONE_MORE_ORD(), ONE()) = ONE_MORE_ORD().
  
  zeroness : Exp -> ZERONESS
  
  zeroness(Literal(Float("0.0"))) = POSSIBLY_ZERO().
  zeroness(Literal(Float(i))) = NON_ZERO().
  zeroness(Literal(Int("0"))) = POSSIBLY_ZERO().
  zeroness(Literal(Int(_))) = NON_ZERO().
  zeroness(_) = POSSIBLY_ZERO().
  
  multupper : MULT -> MULTU
  multupper(ZERO_ONE()) = UONE().
  multupper(ONE()) = UONE().
  multupper(ZERO_MORE()) = UMANY().
  multupper(ONE_MORE()) = UMANY().
  multupper(ZERO_MORE_ORD()) = UMANY().
  multupper(ONE_MORE_ORD()) = UMANY().
  
  divisionMult : MULT * ZERONESS -> MULT
  divisionMult(ZERO_ONE(), _) = ZERO_ONE().
  divisionMult(ZERO_MORE(), _) = ZERO_MORE().
  divisionMult(ONE(), NON_ZERO()) = ONE().
  divisionMult(ONE(), POSSIBLY_ZERO()) = ZERO_ONE().
  divisionMult(ONE_MORE(), NON_ZERO()) = ONE_MORE().
  divisionMult(ONE_MORE(), POSSIBLY_ZERO()) = ZERO_MORE().
  
  upperboundOne : MULT -> MULT
  
  upperboundOne(ZERO_ONE()) = ZERO_ONE().
  upperboundOne(ZERO_MORE()) = ZERO_ONE().
  upperboundOne(ZERO_MORE_ORD()) = ZERO_ONE().
  upperboundOne(ONE()) = ONE().
  upperboundOne(ONE_MORE()) = ONE().
  upperboundOne(ONE_MORE_ORD()) = ONE().
  
  lowerboundZero : MULT -> MULT
  
  lowerboundZero(ZERO_ONE()) = ZERO_ONE().
  lowerboundZero(ZERO_MORE()) = ZERO_MORE().
  lowerboundZero(ZERO_MORE_ORD()) = ZERO_MORE_ORD().
  lowerboundZero(ONE()) = ZERO_ONE().
  lowerboundZero(ONE_MORE()) = ZERO_MORE().
  lowerboundZero(ONE_MORE_ORD()) = ZERO_MORE_ORD().
  
  toOrdered : MULT -> MULT
  
  toOrdered(ZERO_ONE()) = ZERO_ONE().
  toOrdered(ZERO_MORE()) = ZERO_MORE_ORD().
  toOrdered(ZERO_MORE_ORD()) = ZERO_MORE_ORD().
  toOrdered(ONE()) = ZERO_ONE().
  toOrdered(ONE_MORE()) = ZERO_MORE_ORD().
  toOrdered(ONE_MORE_ORD()) = ZERO_MORE_ORD().
  
  choiceLeftMult : MULT * MULT -> MULT

  choiceLeftMult(ONE(), _) = ONE(). // [1,_] -> always left-hand side operand
  choiceLeftMult(ONE_MORE() , _) = ONE_MORE(). // [1,_] -> always left-hand side operand
  choiceLeftMult(ONE_MORE_ORD() , _) = ONE_MORE_ORD(). // [1,_] -> always left-hand side operand
  choiceLeftMult(ZERO_ONE() , mult) = mult. // [0,1] -> always right-hand side multiplicity
  choiceLeftMult(_, ZERO_MORE()) = ZERO_MORE(). // [0,_] <+ [0,n) unordered -> always [0,n) unordered
  choiceLeftMult(_, ONE_MORE() ) = ONE_MORE(). // [0,_] <+ [1,n) unordered -> always [1,n) unordered
  choiceLeftMult(ZERO_MORE_ORD(), ZERO_ONE() ) = ZERO_MORE_ORD(). // [0,n) ordered -> upper-bound many
  choiceLeftMult(ZERO_MORE_ORD(), ONE()) = ONE_MORE_ORD(). // [0,n) ordered -> upper-bound many
  choiceLeftMult(ZERO_MORE_ORD(), ZERO_MORE_ORD()) = ZERO_MORE_ORD(). // [0,n) ordered -> upper-bound many
  choiceLeftMult(ZERO_MORE_ORD(), ONE_MORE_ORD() ) = ONE_MORE_ORD(). // [0,n) ordered -> upper-bound many
  choiceLeftMult(ZERO_MORE(), ZERO_ONE() ) = ZERO_MORE(). // [0,n) unordered -> upper-bound many, drop ordering
  choiceLeftMult(ZERO_MORE(), ONE()) = ONE_MORE(). // [0,n) unordered -> upper-bound many, drop ordering
  choiceLeftMult(ZERO_MORE(), ZERO_MORE_ORD()) = ZERO_MORE(). // [0,n) unordered -> upper-bound many, drop ordering
  choiceLeftMult(ZERO_MORE(), ONE_MORE_ORD() ) = ONE_MORE(). // [0,n) unordered -> upper-bound many, drop ordering
    
  mergeMult : MULT * MULT -> MULT
  
  mergeMult(ONE_MORE(), _) = ONE_MORE(). // [1,_] unordered -> [1,n) unordered
  mergeMult(_, ONE_MORE()) = ONE_MORE(). // [1,_] unordered -> [1,n) unordered
  mergeMult(ZERO_MORE() , ONE()) = ONE_MORE(). // [0,n) unordered ++ [1,_] -> [1,n) unordered
  mergeMult(ONE(), ZERO_MORE() ) = ONE_MORE(). // [0,n) unordered ++ [1,_] -> [1,n) unordered
  mergeMult(ZERO_MORE() , ONE_MORE_ORD() ) = ONE_MORE(). // [0,n) unordered ++ [1,_] -> [1,n) unordered
  mergeMult(ONE_MORE_ORD() , ZERO_MORE() ) = ONE_MORE(). // [0,n) unordered ++ [1,_] -> [1,n) unordered
  mergeMult(ZERO_MORE() , _) = ZERO_MORE(). // [0,n) unordered remaining -> [0,n) unordered
  mergeMult(_, ZERO_MORE()) = ZERO_MORE(). // [0,n) unordered remaining -> [0,n) unordered
  mergeMult(ZERO_ONE(), ZERO_ONE()) = ZERO_MORE_ORD(). // [0,_] ordered ++ [0,_] ordered -> [0,n) ordered
  mergeMult(ZERO_ONE(), ZERO_MORE_ORD()) = ZERO_MORE_ORD(). // [0,_] ordered ++ [0,_] ordered -> [0,n) ordered
  mergeMult(ZERO_MORE_ORD(), ZERO_ONE()) = ZERO_MORE_ORD(). // [0,_] ordered ++ [0,_] ordered -> [0,n) ordered
  mergeMult(ZERO_MORE_ORD(), ZERO_MORE_ORD()) = ZERO_MORE_ORD(). // [0,_] ordered ++ [0,_] ordered -> [0,n) ordered
  mergeMult(_ , _ ) = ONE_MORE_ORD(). // rest -> [1,n) ordered

  multLift : MULT * MULT -> MULT //def * in -> outFactor

  multLift(_, ONE()) = ONE(). // in~[1,1] fits in all multiplicities
  multLift(ONE(), mult) = mult. // def~[1,1] lifts all multiplicities to in multiplicity
  multLift(ZERO_MORE(), _ ) = ONE(). // def~[0,n) fits all multiplicities
  multLift(ZERO_MORE_ORD(), _) = ONE(). // def~[0,n) fits all multiplicities
  multLift(ZERO_ONE(), ZERO_ONE()) = ONE(). // fits
  multLift(ZERO_ONE(), ZERO_MORE_ORD()) = ONE_MORE_ORD(). // lift upper
  multLift(ZERO_ONE(), ONE_MORE_ORD()) = ONE_MORE_ORD(). // lift upper
  multLift(ZERO_ONE(), ZERO_MORE()) = ONE_MORE(). // lift upper, lose ordering
  multLift(ZERO_ONE(), ONE_MORE()) = ONE_MORE(). // lift upper, lose ordering
  multLift(ONE_MORE(), ONE_MORE()) = ONE(). // fits
  multLift(ONE_MORE(), ONE_MORE_ORD() ) = ONE(). // fits
  multLift(ONE_MORE(), ZERO_ONE()) = ZERO_ONE(). // lift lower
  multLift(ONE_MORE(), ZERO_MORE()) = ZERO_ONE(). // lift lower
  multLift(ONE_MORE(), ZERO_MORE_ORD()) = ZERO_ONE(). // lift lower
  multLift(ONE_MORE_ORD(), ONE_MORE_ORD()) = ONE(). // fits
  multLift(ONE_MORE_ORD(), ONE_MORE()) = ONE_MORE(). // fits, lose ordering (means lift upper as well)
  multLift(ONE_MORE_ORD(), ZERO_ONE()) = ZERO_ONE(). // lift lower
  multLift(ONE_MORE_ORD(), ZERO_MORE_ORD()) = ZERO_ONE(). // lift lower
  multLift(ONE_MORE_ORD(), ZERO_MORE()) = ZERO_MORE(). // lift lower, lose ordering (means lift upper as well)
  
rules // strategy lattice

  //         TOnDemandEventual()
  //              /      \
  //      TEventual()   TOnDemand()
  //              \      /
  //       TOnDemandIncremental()
  //                 |
  //            TIncremental()
  
  stratOfStratList : list(Strategy) -> STRAT
  stratOfStratList([x]) = stratOfStrat(x).
  stratOfStratList([]) = EVENTUAL(). // todo inherit from entity / module
  
  stratOfStrat : Strategy -> STRAT
  stratOfStrat(Incremental()) = INCREMENTAL().
  stratOfStrat(OnDemand()) = ONDEMAND().
  stratOfStrat(OnDemandIncremental()) = ONDEMAND_INCREMENTAL().
  stratOfStrat(Eventual()) = EVENTUAL().
  stratOfStrat(OnDemandEventual()) = ONDEMAND_EVENTUAL().
  // todo what about inline?
  
  strat : STRAT * STRAT
  strat(INCREMENTAL(), ONDEMAND_INCREMENTAL()).
  strat(ONDEMAND_INCREMENTAL(), EVENTUAL()).
  strat(ONDEMAND_INCREMENTAL(), ONDEMAND()).
  strat(ONDEMAND(), ONDEMAND_EVENTUAL()).
  strat(EVENTUAL(), ONDEMAND_EVENTUAL()).
  
  // transitive
  strat(ONDEMAND_INCREMENTAL(), ONDEMAND_EVENTUAL()).
  strat(INCREMENTAL(), EVENTUAL()).
  strat(INCREMENTAL(), ONDEMAND()).
  strat(INCREMENTAL(), ONDEMAND_EVENTUAL()).
  
  // reflexive
  strat(S, S).
  
  stratLub : STRAT * STRAT -> STRAT
  
  // root
  stratLub(ONDEMAND_EVENTUAL(), _) = ONDEMAND_EVENTUAL().
  stratLub(_, ONDEMAND_EVENTUAL()) = ONDEMAND_EVENTUAL().
  
  // leaf
  stratLub(INCREMENTAL(), S) = S.
  stratLub(S, INCREMENTAL()) = S.
  
  // inner
  stratLub(EVENTUAL(), ONDEMAND()) = ONDEMAND_EVENTUAL().
  stratLub(ONDEMAND(), EVENTUAL()) = ONDEMAND_EVENTUAL().
  
  stratLub(ONDEMAND_INCREMENTAL(), EVENTUAL()) = EVENTUAL().
  stratLub(EVENTUAL(), ONDEMAND_INCREMENTAL()) = EVENTUAL().
  
  stratLub(ONDEMAND(), ONDEMAND_INCREMENTAL()) = ONDEMAND().
  stratLub(ONDEMAND_INCREMENTAL(), ONDEMAND()) = ONDEMAND().
  
  // identity
  stratLub(ONDEMAND(), ONDEMAND()) = ONDEMAND().
  stratLub(EVENTUAL(), EVENTUAL()) = EVENTUAL().
  stratLub(ONDEMAND_INCREMENTAL(), ONDEMAND_INCREMENTAL()) = ONDEMAND_INCREMENTAL().
    
  materialization : STRAT * SIDE -> MATERIALIZATION
  
  materialization(_, NONE()) = MATERIALIZED().
  materialization(_, LEFT()) = MATERIALIZED().
  materialization(INCREMENTAL(), RIGHT()) = MATERIALIZED().
  materialization(EVENTUAL(), RIGHT()) = MATERIALIZED().
  materialization(ONDEMAND(), RIGHT()) = NON_MATERIALIZED().
  materialization(ONDEMAND_INCREMENTAL(), RIGHT()) = NON_MATERIALIZED().
  materialization(ONDEMAND_EVENTUAL(), RIGHT()) = NON_MATERIALIZED().
  
rules // derivation type lattice

  //       Abstract()
  //        /      \ 
  //  Normal()    Derivation()
  //        \      /
  //     DefaultValue()
  
  deriv : DERIV * DERIV
  deriv(DEFAULT_VALUE(), NORMAL()).
  deriv(DEFAULT_VALUE(), DERIVATION()).
  deriv(NORMAL(), ABSTRACT()).
  deriv(DERIVATION(), ABSTRACT()).
  deriv(D1, D2) :- { X } deriv(D1, X), deriv(X, D2).
  deriv(D, D).
  
  derivLub : DERIV * DERIV -> DERIV
  derivLub(D, D) = D.
  derivLub(D1, D2) = X :-
    deriv(D1, X),
    deriv(D2, X).
  
rules // types

  equitype : TYPE * TYPE
  
  equitype(T, T).
  
  subtype : TYPE * TYPE
  
  subtype(T, T).
  subtype(NOVALUE(), _).
  subtype(T1@ENTITY(_), T2@ENTITY(_)) :- subtypeEntity(T1, T2).
  
  lubtype : TYPE * TYPE -> TYPE
  lubtype(X, X) = X.
  lubtype(NOVALUE(), INT()) = INT().
  lubtype(NOVALUE(), FLOAT()) = FLOAT().
  lubtype(NOVALUE(), STRING()) = STRING().
  lubtype(NOVALUE(), BOOLEAN()) = BOOLEAN().
  lubtype(NOVALUE(), DATETIME()) = DATETIME().
  lubtype(INT(), NOVALUE()) = INT().
  lubtype(FLOAT(), NOVALUE()) = FLOAT().
  lubtype(STRING(), NOVALUE()) = STRING().
  lubtype(BOOLEAN(), NOVALUE()) = BOOLEAN().
  lubtype(DATETIME(), NOVALUE()) = DATETIME().
  lubtype(ENTITY(X), ENTITY(X)) = ENTITY(X).
  lubtype(T1@ENTITY(s1), T2@ENTITY(s2)) = ENTITY(s3) :- {scopes1 scopes2 shared_scopes}
    scopes1 == superScopes(s1),
    scopes2 == superScopes(s2),
    shared_scopes == intersection(scopes1, scopes2),
    [s3 | _] == shared_scopes.
  
  cast : TYPE * TYPE
  cast(INT(), FLOAT()).
  cast(INT(), NOVALUE()).
  cast(FLOAT(), INT()).
  cast(FLOAT(), NOVALUE()).
  cast(STRING(), INT()).
  cast(STRING(), FLOAT()).
  cast(STRING(), BOOLEAN()).
  cast(STRING(), DATETIME()).
  cast(STRING(), NOVALUE()).
  cast(STRING(), STRING()).
  
  subtractionType : TYPE -> TYPE
  
  subtractionType(INT()) = INT().
  subtractionType(FLOAT()) = FLOAT().
  subtractionType(DATETIME()) = INT().
  subtractionType(NOVALUE()) = NOVALUE().
  
  divisionType : TYPE -> TYPE
  
  divisionType(_) = FLOAT().

  isNumeric : TYPE
  isNumeric(INT()).
  isNumeric(FLOAT()).
  isNumeric(NOVALUE()).
  
  isString : TYPE
  isString(STRING()).
  isString(NOVALUE()).
  
  isBoolean : TYPE
  isBoolean(BOOLEAN()).
  isBoolean(NOVALUE()).
  
  canCompare : TYPE
  canCompare(DATETIME()).
  canCompare(FLOAT()).
  canCompare(INT()).
  canCompare(STRING()).
  canCompare(NOVALUE()).
  
  canCompare2 : TYPE
  canCompare2(DATETIME()).
  canCompare2(FLOAT()).
  canCompare2(INT()).
  canCompare2(NOVALUE()).
  
  canAdd : TYPE
  canAdd(FLOAT()).
  canAdd(INT()).
  canAdd(STRING()).
  canAdd(NOVALUE()).
  
  canDivide : TYPE
  canDivide(FLOAT()).
  canDivide(INT()).
  canDivide(NOVALUE()).
  
  // TODO: check if still necessary, maybe not due to difference between statix and nabl2 
  isType : TYPE
  isType(BOOLEAN()).
  isType(DATETIME()).
  isType(FLOAT()).
  isType(INT()).
  isType(STRING()).
  isType(NOVALUE()).
  
rules // type checking

  typeOfExp : scope * Exp -> TYPE
  
  typeOfExp(s, e) = T :-
    richTypeOfExp(s, e) == RICHTYPE(T, _, _).

  richTypeOfExp : scope * Exp -> RICHTYPE
  
  typeOfAnyType : scope * AnyType -> TYPE
  
  typeOfAnyType(_, TypePrimitive(t)) = typeOfPrimitiveType(t).
  typeOfAnyType(s, TypeEntity(x)) = typeOfEntityType(s, x).
  
  typeOfPrimitiveType : PrimitiveType -> TYPE
  
  typeOfPrimitiveType(Boolean()) = BOOLEAN().
  typeOfPrimitiveType(Float()) = FLOAT().
  typeOfPrimitiveType(Datetime()) = DATETIME().
  typeOfPrimitiveType(Int()) = INT().
  typeOfPrimitiveType(String()) = STRING().
  
  typeOfEntityType : scope * EntityType -> TYPE
  
  typeOfEntityType(s, EntityType(id)) = type :-
  	(_, type) == resolveEntity(s, id).
    
rules // name resolution

  declareEntity : scope * ID * scope
  
  declareEntity(s, id, s_model) :-
    !entity[id, ENTITY(s_model)] in s.

  resolveEntity : scope * ID -> (ID * TYPE)
  
  resolveEntity(s, ref_id) = (decl_id, type) :-
    query entity
      filter PARENT* and { x' :- x' == ref_id }
        min and true
        in s |-> [(_, (decl_id, type))].
        
  resolveEntityExtensions : scope * ID -> list((path * (string * scope)))
     
  resolveEntityExtensions(s, id) = ps :-
    query entity_extension
      filter PARENT* and { x' :- x' == (id, _) }
        min and true
        in s |-> ps.
     
  resolveMember : scope * ID -> (ID * RICHTYPE) 
      
  resolveMember(s, ref_id) = (decl_id, richtype) :-
    query member
      filter PARENT* EXTEND? (INHERIT|EXTEND)* and { x' :- x' == ref_id }
        min $ < INHERIT and true
        in s |-> [(_, (decl_id, (richtype, _)))|_].
        
  declareFunction : scope * ID * RICHTYPE * PROPS
  
  declareFunction(s, id, richtype, props) :-
    !function[id, (richtype, props)] in s.

  resolveFunction : scope * ID -> (ID * RICHTYPE * PROPS)
  
  resolveFunction(s, ref_id) = (decl_id, richtype, props) :-
    query function
      filter PARENT* and { x' :- x' == ref_id }
        min and true
        in s |-> [(_, (decl_id, (richtype, props)))].
        
  resolveThis : scope -> TYPE
        
  resolveThis(s) = ENTITY(s). // todo actually declare "this" and resolve it
  
  declareInheritance : scope * list(OptionalExtends)
  
  declareInheritance(s_entity, []).
  declareInheritance(s_entity, [OptionalExtends(Extends(parent_entity))]) :- { s_parent }
    resolveEntity(s_entity, parent_entity) == (_, ENTITY(s_parent)),
    s_entity -INHERIT-> s_parent.
    
  subtypeEntity: TYPE * TYPE
  subtypeEntity(ENTITY(x), ENTITY(x)).
  subtypeEntity(ENTITY(s_entity), ENTITY(s_super)) :- {results}
  	query ()
  		filter INHERIT+ and true
  		min and true
  		in s_entity |-> results,
  	includesScope(results, s_super).
  	
  superScopes: scope -> list((path * scope))
  superScopes(s) = results :-
  	query ()
  		filter INHERIT+ and true
  		min and true
  		in s |-> results.
  
  intersection: list((path * scope)) * list((path * scope)) -> list(scope)
  intersection([(_, x) | xtail], [(_, x) | ytail]) = [x | intersection(xtail, ytail)].
  intersection([(_, x)], [(_, x) | tail]) = [x].
  intersection([(_, x) | tail], [(_, x)]) = [x].
  intersection([(_, x)], [(_, x)]) = [x].
  
  intersection([(_, x) | tail], ys) = concat(intersection([(_, x)], ys), intersection(tail, ys)).
  intersection([(_, x)], [_ | tail]) = intersection([(_, x)], tail).
  
  intersection([(_, x) | tail], []) = [].
  intersection([(_, x)], []) = [].
  intersection([], [(_, x) | tail]) = [].
  intersection([], [(_, x)]) = [].
  intersection([(_, x)], [(_, y)]) = [].
  
  intersection(_, []) = [].
  intersection([], _) = [].
  intersection([], []) = [].
  
  concat: list(scope) * list(scope) -> list(scope)
  concat([x | xs], ls) = [x | concat(xs, ls)].
  concat(ls, []) = ls.
  concat([], ls) = ls.
  
  includesScope : list((path * scope)) * scope
  includesScope([(_, x) | _], x).
  includesScope([_ | xs], x) :- includesScope(xs, x).
  
  
rules // partial classes / extension
  
  extendScopes maps extendScope(list(*), *)
  extendScope : (path * (string * scope)) * scope
  extendScope((_, (_, s)), s). // extension is not reflexive
  extendScope((_, (_, s')), s) :- s -EXTEND-> s'.
  
rules // props
  
  setProp: scope * string * string
  setProp(s, key, value) :-
    !prop[key, PROPVAL_STRING(value)] in s.
    
  setPropExp: scope * string * Exp
  setPropExp(s, key, exp) :-
    !prop[key, PROPVAL_EXP(exp)] in s.
    
  setPropStrat: scope * string * STRAT
  setPropStrat(s, key, strat) :-
    !prop[key, PROPVAL_STRAT(strat)] in s.
    
  setPropRichtypes: scope * string * list(RICHTYPE)
  setPropRichtypes(s, key, richtypes) :-
  	!prop[key, PROPVAL_RICHTYPES(richtypes)] in s.
  
  getProp: PROPS * string -> PROPVAL
  getProp(PROPS(s), key) = propval :-
  	query prop
      filter PARENT* and { x' :- x' == key }
        min and true
        in s |-> [(_, (_, (propval)))].
