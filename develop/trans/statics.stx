module statics

imports signatures/develop-sig

imports statics/core
imports statics/expressions/literals
imports statics/expressions/math
imports statics/expressions/logic
imports statics/expressions/multiplicity-operators
imports statics/expressions/casts
imports statics/expressions/references
imports statics/expressions/functions

rules // multi-file entry points

  projectOk : scope
  projectOk(s).
  
  fileOk : scope * Start
  fileOk(s, m@Module(id, opt, sections)) :-
    sectionsOk(s, sections).
  
rules // module sections

  sectionsOk maps sectionOk(*, list(*))
  sectionOk : scope * ModuleSection
  
  sectionOk(s, ModelSection(models)) :-
    modelsOk(s, models).
  sectionOk(s, FunctionSection(_)).
  sectionOk(s, DataSection(_)).
  sectionOk(s, ExecuteSection(_)).
  
rules // models
  
  modelsOk maps modelOk(*, list(*))
  
  modelOk : scope * Model
  modelOk(s, Entity(id, _, _, members)) :- { s_model s_resolve }
    new s_model, s_model -P-> s,
    declareEntity(s, id, s_model),
    membersOk(s_model, members),
    resolveEntity(s_model, id) == ENTITY(s_resolve) | error $[duplicate definition of entity [id]]@id,
    @id.type := ENTITY(s_resolve).
    
  modelOk(s, Relation(id, _, _, _, _, _)).
    
  membersOk maps memberOk(*, list(*))
  memberOk : scope * Member
  
  memberOk(s, DerivationAttribute(id, type, mult, exp, strat)) :-
  { declared decl_richtype e_type e_mult e_strat d_type d_mult d_strat }
    RICHTYPE(e_type, e_mult, e_strat) == richTypeOfExp(s, exp),

    d_type == typeOfAnyType(s, type),
    d_mult == multOfMultOrdList(mult),
    d_strat == stratOfStratList(strat),
    
    subtype(e_type, d_type) | error $[type mismatch: expected [d_type] got [e_type]]@exp,
    mult(e_mult, d_mult) | error $[multiplicity mismatch: expected [d_mult] got [e_mult]]@exp,
    strat(e_strat, d_strat) | error $[strategy mismatch: expected [d_strat] got [e_strat]]@exp,
    
    !member[id, RICHTYPE(d_type, d_mult, d_strat)] in s,
    @id.type := RICHTYPE(d_type, d_mult, d_strat),
    @exp.type := RICHTYPE(e_type, e_mult, e_strat).
  
