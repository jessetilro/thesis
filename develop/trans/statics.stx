module statics

imports signatures/develop-sig

signature
    
  sorts
    TYPE
    MULT
    MULTU
    STRAT
    RICHTYPE
    DERIV
    ZERONESS
    
  constructors
    INT : TYPE
    STRING : TYPE
    FLOAT : TYPE
    BOOLEAN : TYPE
    DATETIME : TYPE
    NOVALUE : TYPE
    ENTITY : ID -> TYPE
    
    ONE : MULT
    ZERO_ONE : MULT
    ONE_MORE : MULT
    ZERO_MORE : MULT
    ZERO_MORE_ORD : MULT
    ONE_MORE_ORD : MULT
    
    UONE : MULTU
    UMANY : MULTU
    
    ONDEMAND : STRAT
    INCREMENTAL : STRAT
    EVENTUAL : STRAT
    ONDEMAND_INCREMENTAL : STRAT
    ONDEMAND_EVENTUAL : STRAT
    
    RICHTYPE : TYPE * MULT * STRAT -> RICHTYPE
    
    NORMAL : DERIV
    ABSTRACT : DERIV
    DERIVATION : DERIV
    DEFAULT_VALUE : DERIV
    
    NON_ZERO : ZERONESS
    POSSIBLY_ZERO : ZERONESS

  relations
  
  name-resolution
    labels 
      // D // definition
      I // import
      J // lower priority import
      P // parent
      S // requires a J to be wellformed
      // N // no edge at all (used for inverse querying)

rules // multi-file entry points

  projectOk : scope
  projectOk(s).
  
  fileOk : scope * Start
  fileOk(s, m@Module(id, opt, sections)) :-
    sectionsOk(s, sections).
  
rules // module sections

  sectionsOk maps sectionOk(*, list(*))
  sectionOk : scope * ModuleSection
  
  sectionOk(s, ModelSection(models)) :-
    modelsOk(s, models).
  sectionOk(s, FunctionSection(_)).
  sectionOk(s, DataSection(_)).
  sectionOk(s, ExecuteSection(_)).
  
rules // models
  
  modelsOk maps modelOk(*, list(*))
  
  modelOk : scope * Model
  modelOk(s, Entity(id, _, _, members)) :-
    membersOk(s, members).
    
  membersOk maps memberOk(*, list(*))
  memberOk : scope * Member
  
  memberOk(s, DerivationAttribute(_, type, _, exp, _)) :- {declared}
    typeOfExp(s, exp) == typeOfAnyType(s, type) | error $[the expression does not have the declared type]@exp.
  
rules // type utils

  equitype : TYPE * TYPE
  
  equitype(T, T).
  
  subtype : TYPE * TYPE
  
  subtype(T, T).
  subtype(NOVALUE(), _).
  subtype(T1, T2) :- { X } subtype(T1, X), subtype(X, T2).
  
  lubtype : TYPE * TYPE -> TYPE
  lubtype(X, X) = X.
  lubtype(NOVALUE(), INT()) = INT().
  lubtype(NOVALUE(), FLOAT()) = FLOAT().
  lubtype(NOVALUE(), STRING()) = STRING().
  lubtype(NOVALUE(), BOOLEAN()) = BOOLEAN().
  lubtype(NOVALUE(), DATETIME()) = DATETIME().
  lubtype(INT(), NOVALUE()) = INT().
  lubtype(FLOAT(), NOVALUE()) = FLOAT().
  lubtype(STRING(), NOVALUE()) = STRING().
  lubtype(BOOLEAN(), NOVALUE()) = BOOLEAN().
  lubtype(DATETIME(), NOVALUE()) = DATETIME().
  
  cast : TYPE * TYPE
  cast(INT(), FLOAT()).
  cast(INT(), NOVALUE()).
  cast(FLOAT(), INT()).
  cast(FLOAT(), NOVALUE()).
  cast(STRING(), INT()).
  cast(STRING(), FLOAT()).
  cast(STRING(), BOOLEAN()).
  cast(STRING(), DATETIME()).
  cast(STRING(), NOVALUE()).
  cast(STRING(), STRING()).
  
  zeroness : Exp -> ZERONESS
  
  zeroness(Literal(Float("0.0"))) = POSSIBLY_ZERO().
  zeroness(Literal(Float(i))) = NON_ZERO().
  zeroness(Literal(Int("0"))) = POSSIBLY_ZERO().
  zeroness(Literal(Int(_))) = NON_ZERO().
  zeroness(_) = POSSIBLY_ZERO().
  
  multupper : MULT -> MULTU
  multupper(ZERO_ONE()) = UONE().
  multupper(ONE()) = UONE().
  multupper(ZERO_MORE()) = UMANY().
  multupper(ONE_MORE()) = UMANY().
  multupper(ZERO_MORE_ORD()) = UMANY().
  multupper(ONE_MORE_ORD()) = UMANY().
  
  divisionMult : MULT * ZERONESS -> MULT
  divisionMult(ZERO_ONE(), _) = ZERO_ONE().
  divisionMult(ZERO_MORE(), _) = ZERO_MORE().
  divisionMult(ONE(), NON_ZERO()) = ONE().
  divisionMult(ONE(), POSSIBLY_ZERO()) = ZERO_ONE().
  divisionMult(ONE_MORE(), NON_ZERO()) = ONE_MORE().
  divisionMult(ONE_MORE(), POSSIBLY_ZERO()) = ZERO_MORE().
  
  subtractionType : TYPE -> TYPE
  
  subtractionType(INT()) = INT().
  subtractionType(FLOAT()) = FLOAT().
  subtractionType(DATETIME()) = INT().
  subtractionType(NOVALUE()) = NOVALUE().
  
  divisionType : TYPE -> TYPE
  
  divisionType(_) = FLOAT().
  
rules // multiplicity/ordering lattice

  //                 TZeroOrMore()
  //                  /    \
  // ZeroOrMoreOrdered()  TOneOrMore()
  //             /    \    /
  //  TZeroOrOne()  TOneOrMoreOrdered()
  //             \    /
  //             TOne()
  
  mult : MULT * MULT
  mult(ONE(), ZERO_ONE()).
  mult(ONE(), ONE_MORE_ORD()).
  mult(ZERO_ONE(), ZERO_MORE_ORD()).
  mult(ONE_MORE_ORD(), ZERO_MORE_ORD()).
  mult(ONE_MORE_ORD(), ONE_MORE()).
  mult(ZERO_MORE_ORD(), ZERO_MORE()).
  mult(ONE_MORE(), ZERO_MORE()).
  mult(M1, M2) :- { X } mult(M1, X), mult(X, M2).
  mult(M, M).
  
  multLub : MULT * MULT -> MULT
  multLub(M, M) = M.
  multLub(M1, M2) = X :-
    mult(M1, X),
    mult(M2, X).
  
rules // strategy lattice

  //         TOnDemandEventual()
  //              /      \
  //      TEventual()   TOnDemand()
  //              \      /
  //       TOnDemandIncremental()
  //                 |
  //            TIncremental()
  
  strat : STRAT * STRAT
  strat(INCREMENTAL(), ONDEMAND_INCREMENTAL()).
  strat(ONDEMAND_INCREMENTAL(), EVENTUAL()).
  strat(ONDEMAND_INCREMENTAL(), ONDEMAND()).
  strat(ONDEMAND(), ONDEMAND_EVENTUAL()).
  strat(EVENTUAL(), ONDEMAND_EVENTUAL()).
  strat(S1, S2) :- { X } strat(S1, X), strat(X, S2).
  
  stratLub : STRAT * STRAT -> STRAT
  stratLub(S, S) = S.
  stratLub(S1, S2) = X :-
    strat(S1, X),
    strat(S2, X).
  
rules // derivation type lattice

  //       Abstract()
  //        /      \ 
  //  Normal()    Derivation()
  //        \      /
  //     DefaultValue()
  
  deriv : DERIV * DERIV
  deriv(DEFAULT_VALUE(), NORMAL()).
  deriv(DEFAULT_VALUE(), DERIVATION()).
  deriv(NORMAL(), ABSTRACT()).
  deriv(DERIVATION(), ABSTRACT()).
  deriv(D1, D2) :- { X } deriv(D1, X), deriv(X, D2).
  
  derivLub : DERIV * DERIV -> DERIV
  derivLub(D, D) = D.
  derivLub(D1, D2) = X :-
    deriv(D1, X),
    deriv(D2, X).
  
rules // type tests (maybe this should become a sort like in nabl2?)

  isNumeric : TYPE
  isNumeric(INT()).
  isNumeric(FLOAT()).
  isNumeric(NOVALUE()).
  
  isString : TYPE
  isString(STRING()).
  isString(NOVALUE()).
  
  isBoolean : TYPE
  isBoolean(BOOLEAN()).
  isBoolean(NOVALUE()).
  
  canCompare : TYPE
  canCompare(DATETIME()).
  canCompare(FLOAT()).
  canCompare(INT()).
  canCompare(STRING()).
  canCompare(NOVALUE()).
  
  canCompare2 : TYPE
  canCompare2(DATETIME()).
  canCompare2(FLOAT()).
  canCompare2(INT()).
  canCompare2(NOVALUE()).
  
  canAdd : TYPE
  canAdd(FLOAT()).
  canAdd(INT()).
  canAdd(STRING()).
  canAdd(NOVALUE()).
  
  canDivide : TYPE
  canDivide(FLOAT()).
  canDivide(INT()).
  canDivide(NOVALUE()).
  
rules // typing

  typeOfExp : scope * Exp -> TYPE
  
  typeOfExp(s, e) = T :-
    richTypeOfExp(s, e) == RICHTYPE(T, _, _).

  richTypeOfExp : scope * Exp -> RICHTYPE
  
  richTypeOfExp(s, e@Addition(e1, e2)) = RICHTYPE(out_type, out_mult, out_strat) :-
  { e1_type e1_mult e1_strat e2_type e2_mult e2_strat }
    richTypeOfExp(s, e1) == RICHTYPE(e1_type, e1_mult, e1_strat),
    richTypeOfExp(s, e2) == RICHTYPE(e2_type, e2_mult, e2_strat),
    canAdd(e1_type) | error $[an expression of type [e1_type] cannot be the argument of an addition]@e1,
    canAdd(e2_type) | error $[an expression of type [e2_type] cannot be the argument of an addition]@e2,
    out_type == lubtype(e1_type, e2_type) | error $[expressions of type [e1_type] and [e2_type] cannot be added]@e,
    out_mult == multLub(e1_mult, e2_mult),
    out_strat == stratLub(e1_strat, e2_strat),
    multupper(e1_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e1_mult]]@e1,
    multupper(e2_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e2_mult]]@e2.
      
  richTypeOfExp(s, e@Subtraction(e1, e2)) = RICHTYPE(out_type, out_mult, out_strat) :-
  { e1_type e1_mult e1_strat e2_type e2_mult e2_strat lub_type }
    richTypeOfExp(s, e1) == RICHTYPE(e1_type, e1_mult, e1_strat),
    richTypeOfExp(s, e2) == RICHTYPE(e2_type, e2_mult, e2_strat),
    lub_type == lubtype(e1_type, e2_type) | error $[expressions of type [e1_type] and [e2_type] cannot be subtracted]@e,
    out_type == subtractionType(lub_type) | error $[expressions of type [e1_type] and [e2_type] cannot be subtracted]@e,
    out_mult == multLub(e1_mult, e2_mult),
    out_strat == stratLub(e1_strat, e2_strat),
    multupper(e1_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e1_mult]]@e1,
    multupper(e2_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e2_mult]]@e2.
    
  richTypeOfExp(s, e@Division(e1, e2)) = RICHTYPE(out_type, out_mult, out_strat) :-
  { e1_type e1_mult e1_strat e2_type e2_mult e2_strat lub_type }
    richTypeOfExp(s, e1) == RICHTYPE(e1_type, e1_mult, e1_strat),
    richTypeOfExp(s, e2) == RICHTYPE(e2_type, e2_mult, e2_strat),
    canDivide(e1_type) | error $[an expression of type [e1_type] cannot be the argument of a division]@e1,
    canDivide(e2_type) | error $[an expression of type [e2_type] cannot be the argument of a division]@e2,
    lub_type == lubtype(e1_type, e2_type) | error $[expressions of type [e1_type] and [e2_type] cannot be divided]@e,
    out_type == divisionType(lub_type),
    out_mult == divisionMult(multLub(e1_mult, e2_mult), zeroness(e2)),
    out_strat == stratLub(e1_strat, e2_strat),
    multupper(e1_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e1_mult]]@e1,
    multupper(e2_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e2_mult]]@e2.
  
  richTypeOfExp(s, e@FloorDivision(e1, e2)) = RICHTYPE(out_type, out_mult, out_strat) :-
  { e1_type e1_mult e1_strat e2_type e2_mult e2_strat }
    richTypeOfExp(s, e1) == RICHTYPE(e1_type, e1_mult, e1_strat),
    richTypeOfExp(s, e2) == RICHTYPE(e2_type, e2_mult, e2_strat),
    canDivide(e1_type) | error $[an expression of type [e1_type] cannot be the argument of a division]@e1,
    canDivide(e2_type) | error $[an expression of type [e2_type] cannot be the argument of a division]@e2,
    out_type == lubtype(e1_type, e2_type) | error $[expressions of type [e1_type] and [e2_type] cannot be divided]@e,
    out_mult == divisionMult(multLub(e1_mult, e2_mult), zeroness(e2)),
    out_strat == stratLub(e1_strat, e2_strat),
    multupper(e1_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e1_mult]]@e1,
    multupper(e2_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e2_mult]]@e2.
      
  richTypeOfExp(s, e@Modulo(e1, e2)) = RICHTYPE(out_type, out_mult, out_strat) :-
  { e1_type e1_mult e1_strat e2_type e2_mult e2_strat }
    richTypeOfExp(s, e1) == RICHTYPE(e1_type, e1_mult, e1_strat),
    richTypeOfExp(s, e2) == RICHTYPE(e2_type, e2_mult, e2_strat),
    canDivide(e1_type) | error $[an expression of type [e1_type] cannot be the argument of a division]@e1,
    canDivide(e2_type) | error $[an expression of type [e2_type] cannot be the argument of a division]@e2,
    out_type == lubtype(e1_type, e2_type) | error $[expressions of type [e1_type] and [e2_type] cannot be divided]@e,
    out_mult == divisionMult(multLub(e1_mult, e2_mult), zeroness(e2)),
    out_strat == stratLub(e1_strat, e2_strat),
    multupper(e1_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e1_mult]]@e1,
    multupper(e2_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e2_mult]]@e2.
  
  richTypeOfExp(s, e@Multiplication(e1, e2)) = RICHTYPE(out_type, out_mult, out_strat) :-
  { e1_type e1_mult e1_strat e2_type e2_mult e2_strat }
    richTypeOfExp(s, e1) == RICHTYPE(e1_type, e1_mult, e1_strat),
    richTypeOfExp(s, e2) == RICHTYPE(e2_type, e2_mult, e2_strat),
    canDivide(e1_type) | error $[an expression of type [e1_type] cannot be the argument of a multiplication]@e1,
    canDivide(e2_type) | error $[an expression of type [e2_type] cannot be the argument of a multiplication]@e2,
    out_type == lubtype(e1_type, e2_type) | error $[expressions of type [e1_type] and [e2_type] cannot be multiplied]@e,
    out_mult == multLub(e1_mult, e2_mult),
    out_strat == stratLub(e1_strat, e2_strat),
    multupper(e1_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e1_mult]]@e1,
    multupper(e2_mult) == UONE() | error $[Multiplicity mismatch: expected One or ZeroOrOne got [e2_mult]]@e2.
      
  richTypeOfExp(_, Literal(Int(_))) = RICHTYPE(INT(), ONE(), INCREMENTAL()).
  richTypeOfExp(_, Literal(Float(_))) = RICHTYPE(FLOAT(), ONE(), INCREMENTAL()).
  richTypeOfExp(_, Literal(True())) = RICHTYPE(BOOLEAN(), ONE(), INCREMENTAL()).
  richTypeOfExp(_, Literal(False())) = RICHTYPE(BOOLEAN(), ONE(), INCREMENTAL()).
  richTypeOfExp(_, Literal(String(_))) = RICHTYPE(STRING(), ONE(), INCREMENTAL()).
  richTypeOfExp(_, Literal(NoValue())) = RICHTYPE(NOVALUE(), ONE(), INCREMENTAL()).
  
  typeOfAnyType : scope * AnyType -> TYPE
  
  typeOfAnyType(_, TypePrimitive(t)) = typeOfPrimitiveType(t).
  
  typeOfPrimitiveType : PrimitiveType -> TYPE
  
  typeOfPrimitiveType(Boolean()) = BOOLEAN().
  typeOfPrimitiveType(Float()) = FLOAT().
  typeOfPrimitiveType(Datetime()) = DATETIME().
  typeOfPrimitiveType(Int()) = INT().
  typeOfPrimitiveType(String()) = STRING().
  
