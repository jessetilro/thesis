module statics

imports signatures/develop-sig

// see README.md for details on how to switch to multi-file analysis

rules // single-file entry point

  programOk : Start
  programOk(Module(id, opt, sections)) :-
    sectionsOk(sections).
  
  sectionsOk maps sectionOk(list(*))
  
  sectionOk : ModuleSection
  
  sectionOk(ModelSection(models)) :-
    modelsOk(models).
  sectionOk(FunctionSection(_)).
  sectionOk(DataSection(_)).
  sectionOk(ExecuteSection(_)).
  
  modelsOk maps modelOk(list(*))
  
  modelOk : Model
  modelOk(Entity(id, _, _, members)) :-
    id == "Test" | error $[entity should be named Test]@id,
    membersOk(members).
    
  membersOk maps memberOk(list(*))
  memberOk : Member
  
  memberOk(DerivationAttribute(_, type, _, exp, _)) :- {s declared}
    new s,
    typeOfAnyType(s, type) == typeOfExp(s, exp) | error $[the expression does not have the declared type]@exp.
  
rules // typing

  equitype : TYPE * TYPE
  
  equitype(T, T).
  
  typeOfExp : scope * Exp -> TYPE
  
  typeOfExp(_, ExpLitVal(Int(_))) = INT().
  typeOfExp(_, ExpLitVal(Float(_))) = FLOAT().
  typeOfExp(_, ExpLitVal(True())) = BOOLEAN().
  typeOfExp(_, ExpLitVal(False())) = BOOLEAN().
  typeOfExp(_, ExpLitVal(Datetime(_))) = DATETIME().
  
  
  typeOfAnyType : scope * AnyType -> TYPE
  
  typeOfAnyType(_, TypePrimitive(t)) = tt :-
    tt == typeOfPrimitiveType(t).
  
  typeOfPrimitiveType : PrimitiveType -> TYPE
  
  typeOfPrimitiveType(Boolean()) = BOOLEAN().
  typeOfPrimitiveType(Float()) = FLOAT().
  typeOfPrimitiveType(Datetime()) = DATETIME().
  typeOfPrimitiveType(Int()) = INT().
  typeOfPrimitiveType(String()) = STRING().
  
//  typeOfExp(s, Int(_)) = INT().
//  typeOfExp(s, String(_)) = STRING().
//  
//  typeOfExp(s, Add(e1, e2)) = INT() :- {T1 T2}
//    typeOfExp(s, e1) == T1,
//    typeOfExp(s, e2) == T2,
//    equitype(T1, T2) | error $[operands should have the same type].

signature
    
  sorts
  	TYPE
    
  constructors
  	INT : TYPE
  	STRING : TYPE
  	FLOAT : TYPE
  	BOOLEAN : TYPE
  	DATETIME : TYPE
